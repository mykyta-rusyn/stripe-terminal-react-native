{"version":3,"names":["_reactNative","require","StripeTerminalReactNative","NativeModules","_default","exports","default"],"sources":["StripeTerminalSdk.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  InitParams,\n  StripeError,\n  DiscoverReadersParams,\n  DiscoverReadersResultType,\n  CancelDiscoveringResultType,\n  DisconnectReaderResultType,\n  RebootReaderResultType,\n  Reader,\n  CreatePaymentIntentParams,\n  CollectSetupIntentPaymentMethodParams,\n  PaymentIntentResultType,\n  Cart,\n  SetupIntentResultType,\n  CreateSetupIntentParams,\n  ClearReaderDisplayResultType,\n  GetLocationsParams,\n  GetLocationsResultType,\n  RefundParams,\n  CollectRefundPaymentMethodType,\n  ConfirmRefundResultType,\n  SetConnectionTokenParams,\n  ConnectReaderResultType,\n  CollectPaymentMethodParams,\n  OfflineStatus,\n  ICollectInputsParameters,\n  ICollectInputsResults,\n  PaymentStatus,\n  ConnectionStatus,\n  ConfirmPaymentMethodParams,\n  ConfirmSetupIntentMethodParams,\n  CancelSetupIntentMethodParams,\n  CancelPaymentMethodParams,\n  CollectDataParams,\n  CollectDataResultType,\n  TapToPayUxConfiguration,\n  ConnectReaderParams,\n  PrintContent,\n} from './types';\n\nconst { StripeTerminalReactNative } = NativeModules;\n\ntype InitializeResultNativeType = Promise<{\n  error?: StripeError;\n  reader?: Reader.Type;\n}>;\n\ninterface InternalInitParams extends InitParams {\n  reactNativeVersion: string;\n}\n\nexport interface StripeTerminalSdkType {\n  // Initialize StripeTerminalSdk native module\n  initialize(params: InternalInitParams): InitializeResultNativeType;\n  // Set connection token\n  setConnectionToken(params: SetConnectionTokenParams): Promise<void>;\n  // Discover readers by connection type\n  discoverReaders(params: DiscoverReadersParams): DiscoverReadersResultType;\n  // Cancel discovering readers\n  cancelDiscovering(): CancelDiscoveringResultType;\n  // Connect to reader via bluetooth\n  connectReader(\n    params: ConnectReaderParams,\n    discoveryMethod: Reader.DiscoveryMethod\n  ): Promise<ConnectReaderResultType>;\n  // Disconnect reader\n  disconnectReader(): Promise<DisconnectReaderResultType>;\n  // Reboot reader\n  rebootReader(): Promise<RebootReaderResultType>;\n  // Create a payment intent\n  createPaymentIntent(\n    params: CreatePaymentIntentParams\n  ): Promise<PaymentIntentResultType>;\n  // Collect Payment Method\n  collectPaymentMethod(\n    params: CollectPaymentMethodParams\n  ): Promise<PaymentIntentResultType>;\n  // Retrieve Payment Intent\n  retrievePaymentIntent(clientSecret: string): Promise<PaymentIntentResultType>;\n  // Confirm Payment Intent\n  confirmPaymentIntent(\n    params: ConfirmPaymentMethodParams\n  ): Promise<PaymentIntentResultType>;\n  // Create Setup Intent\n  createSetupIntent(\n    params: CreateSetupIntentParams\n  ): Promise<SetupIntentResultType>;\n  // Cancel Payment Intent\n  cancelPaymentIntent(\n    params: CancelPaymentMethodParams\n  ): Promise<PaymentIntentResultType>;\n  // Collect Setup Intent payment method\n  collectSetupIntentPaymentMethod(\n    params: CollectSetupIntentPaymentMethodParams\n  ): Promise<SetupIntentResultType>;\n  // Install available update\n  installAvailableUpdate(): Promise<void>;\n  // Cancel installing software update\n  cancelInstallingUpdate(): Promise<void>;\n  // Set text on a reader display\n  setReaderDisplay(cart: Cart): Promise<{\n    error?: StripeError;\n  }>;\n  // Clear reader display\n  clearReaderDisplay(): Promise<ClearReaderDisplayResultType>;\n  retrieveSetupIntent(clientSecret: string): Promise<SetupIntentResultType>;\n  // Cancel Setup Intent\n  cancelSetupIntent(\n    params: CancelSetupIntentMethodParams\n  ): Promise<SetupIntentResultType>;\n  // List of locations belonging to the merchant\n  getLocations(params: GetLocationsParams): Promise<GetLocationsResultType>;\n  // Confirm Setup Intent\n  confirmSetupIntent(\n    params: ConfirmSetupIntentMethodParams\n  ): Promise<SetupIntentResultType>;\n  simulateReaderUpdate(update: Reader.SimulateUpdateType): Promise<void>;\n  collectRefundPaymentMethod(\n    params: RefundParams\n  ): Promise<CollectRefundPaymentMethodType>;\n  cancelCollectRefundPaymentMethod(): Promise<{\n    error?: StripeError;\n  }>;\n  confirmRefund(): Promise<ConfirmRefundResultType>;\n  clearCachedCredentials(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelCollectPaymentMethod(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelCollectSetupIntent(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelConfirmPaymentIntent(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelConfirmSetupIntent(): Promise<{\n    error?: StripeError;\n  }>;\n  cancelConfirmRefund(): Promise<{\n    error?: StripeError;\n  }>;\n  setSimulatedCard(cardNumber: string): Promise<{\n    error?: StripeError;\n  }>;\n  setSimulatedOfflineMode(simulatedOffline: boolean): Promise<{\n    error?: StripeError;\n  }>;\n  setSimulatedCollectInputsResult(\n    simulatedCollectInputsBehavior: string\n  ): Promise<{\n    error?: StripeError;\n  }>;\n  getOfflineStatus(): Promise<OfflineStatus>;\n  getPaymentStatus(): Promise<PaymentStatus>;\n  getConnectionStatus(): Promise<ConnectionStatus>;\n  getConnectedReader(): Promise<Reader.Type>;\n  getReaderSettings(): Promise<Reader.ReaderSettings>;\n  setReaderSettings(\n    params: Reader.ReaderSettingsParameters\n  ): Promise<Reader.ReaderSettings>;\n  collectInputs(\n    params: ICollectInputsParameters\n  ): Promise<ICollectInputsResults>;\n  cancelCollectInputs(): Promise<{\n    error?: StripeError;\n  }>;\n  collectData(params: CollectDataParams): Promise<CollectDataResultType>;\n  cancelCollectData(): Promise<{\n    error?: StripeError;\n  }>;\n  /**\n   * Prints the specified content to the connected reader's printer, if available.\n   * @param content The content to print. Must be an image (JPEG/PNG) encoded as a base64 string or 'data:' URI scheme.\n   * @returns A promise that resolves to an empty object if the print succeeds, or an object containing a `StripeError` if the print fails.\n   */\n  print(content: PrintContent): Promise<{\n    error?: StripeError;\n  }>;\n  cancelReaderReconnection(): Promise<{\n    error?: StripeError;\n  }>;\n  supportsReadersOfType(\n    params: Reader.ReaderSupportParams\n  ): Promise<Reader.ReaderSupportResult>;\n  setTapToPayUxConfiguration(params: TapToPayUxConfiguration): Promise<{\n    error?: StripeError;\n  }>;\n  getNativeSdkVersion(): Promise<string>;\n}\n\nexport default StripeTerminalReactNative as StripeTerminalSdkType;\n"],"mappings":"gFAAA,IAAAA,YAAA,CAAAC,OAAA,iBAyCA,GAAQ,CAAAC,yBAAyB,CAAKC,0BAAa,CAA3CD,yBAAyB,CAAmB,IAAAE,QAAA,CAAAC,OAAA,CAAAC,OAAA,CAuJrCJ,yBAAyB","ignoreList":[]}