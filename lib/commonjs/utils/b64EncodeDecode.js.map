{"version":3,"names":["_base","require","b64EncodeUnicode","exports","str","b64encode","encodeURIComponent","replace","_match","p1","String","fromCharCode","b64DecodeUnicode","decodeURIComponent","b64decode","split","map","c","charCodeAt","toString","slice","join"],"sources":["b64EncodeDecode.ts"],"sourcesContent":["import { decode as b64decode, encode as b64encode } from 'base-64';\n\nconst b64EncodeUnicode = (str: string) => {\n  // First we use encodeURIComponent to get percent-encoded UTF-8,\n  // then we convert the percent encodings into raw bytes which\n  // can be fed into btoa.\n  return b64encode(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (_match, p1) =>\n      String.fromCharCode(<any>'0x' + p1)\n    )\n  );\n};\n\nconst b64DecodeUnicode = (str: string) => {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return decodeURIComponent(\n    b64decode(str)\n      .split('')\n      .map((c: string) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n      .join('')\n  );\n};\n\nexport { b64EncodeUnicode, b64DecodeUnicode };\n"],"mappings":"kHAAA,IAAAA,KAAA,CAAAC,OAAA,YAEA,GAAM,CAAAC,gBAAgB,CAAAC,OAAA,CAAAD,gBAAA,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIE,GAAW,CAAK,CAIxC,MAAO,GAAAC,YAAS,EACdC,kBAAkB,CAACF,GAAG,CAAC,CAACG,OAAO,CAAC,iBAAiB,CAAE,SAACC,MAAM,CAAEC,EAAE,QAC5D,CAAAC,MAAM,CAACC,YAAY,CAAM,IAAI,CAAGF,EAAE,CAAC,EACrC,CACF,CAAC,CACH,CAAC,CAED,GAAM,CAAAG,gBAAgB,CAAAT,OAAA,CAAAS,gBAAA,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIR,GAAW,CAAK,CAExC,MAAO,CAAAS,kBAAkB,CACvB,GAAAC,YAAS,EAACV,GAAG,CAAC,CACXW,KAAK,CAAC,EAAE,CAAC,CACTC,GAAG,CAAC,SAACC,CAAS,QAAK,IAAI,KAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,GAAC,CACvEC,IAAI,CAAC,EAAE,CACZ,CAAC,CACH,CAAC","ignoreList":[]}