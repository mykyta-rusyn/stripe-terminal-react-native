{"version":3,"names":["_react","require","StripeTerminalContext","exports","createContext","emitter","undefined","discoveredReaders","loading","isInitialized","getIsInitialized","log","setLoading","setConnectedReader","initialize","setDiscoveredReaders"],"sources":["StripeTerminalContext.ts"],"sourcesContent":["import { createContext } from 'react';\nimport type EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nimport type { Reader, InitializeResultType } from '../types';\n\ntype ContextType = {\n  loading: boolean;\n  isInitialized: boolean;\n  getIsInitialized: () => boolean;\n  connectedReader?: Reader.Type | null;\n  discoveredReaders: Reader.Type[];\n  emitter?: EventEmitter;\n  setLoading(value: boolean): void;\n  setConnectedReader(value: Reader.Type | null): void;\n  setDiscoveredReaders(value: Reader.Type[]): void;\n  initialize?(): Promise<InitializeResultType>;\n  log(code: string, message?: any): void;\n};\n\nexport const StripeTerminalContext = createContext<ContextType>({\n  emitter: undefined,\n  discoveredReaders: [],\n  loading: false,\n  isInitialized: false,\n  getIsInitialized: () => false,\n  log: () => {},\n  setLoading: () => {},\n  setConnectedReader: () => {},\n  initialize: undefined,\n  setDiscoveredReaders: () => {},\n});\n"],"mappings":"8FAAA,IAAAA,MAAA,CAAAC,OAAA,UAkBO,GAAM,CAAAC,qBAAqB,CAAAC,OAAA,CAAAD,qBAAA,CAAG,GAAAE,oBAAa,EAAc,CAC9DC,OAAO,CAAEC,SAAS,CAClBC,iBAAiB,CAAE,EAAE,CACrBC,OAAO,CAAE,KAAK,CACdC,aAAa,CAAE,KAAK,CACpBC,gBAAgB,CAAE,QAAlB,CAAAA,gBAAgBA,CAAA,QAAQ,MAAK,GAC7BC,GAAG,CAAE,QAAL,CAAAA,GAAGA,CAAA,CAAQ,CAAC,CAAC,CACbC,UAAU,CAAE,QAAZ,CAAAA,UAAUA,CAAA,CAAQ,CAAC,CAAC,CACpBC,kBAAkB,CAAE,QAApB,CAAAA,kBAAkBA,CAAA,CAAQ,CAAC,CAAC,CAC5BC,UAAU,CAAER,SAAS,CACrBS,oBAAoB,CAAE,QAAtB,CAAAA,oBAAoBA,CAAA,CAAQ,CAAC,CAC/B,CAAC,CAAC","ignoreList":[]}