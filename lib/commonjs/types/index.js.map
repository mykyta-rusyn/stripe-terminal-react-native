{"version":3,"names":["_Reader","require","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_SetupIntent","_PaymentIntent","_Refund","CommonError","PaymentMethod","FormType","SelectionButtonStyle","ToggleValue","ToggleResult","CollectDataType","TapZoneIndicator","DarkMode"],"sources":["index.ts"],"sourcesContent":["import type { Refund } from './Refund';\nimport type { PaymentIntent } from './PaymentIntent';\nimport type { Reader } from './Reader';\nimport type { SetupIntent } from './SetupIntent';\n\nexport * from './Reader';\nexport * from './SetupIntent';\nexport * from './PaymentIntent';\nexport * from './Refund';\n\nexport type InitParams = {\n  logLevel?: LogLevel;\n};\n\nexport type SetConnectionTokenParams = {\n  token?: string;\n  error?: string;\n  callbackId?: string;\n};\n\nexport type LogLevel = LogLevelIOS | LogLevelAndroid;\nexport type LogLevelIOS = 'none' | 'verbose';\nexport type LogLevelAndroid = 'none' | 'verbose' | 'error' | 'warning';\n\nexport type DiscoverReadersParams = {\n  locationId?: string;\n  timeout?: number;\n  simulated?: boolean;\n  discoveryMethod: Reader.DiscoveryMethod;\n};\n\nexport type GetLocationsParams = {\n  limit?: number;\n  endingBefore?: string;\n  startingAfter?: string;\n};\n\nexport interface ConnectReaderParams {\n  reader: Reader.Type;\n}\n\nexport interface ConnectBluetoothReaderParams extends ConnectReaderParams {\n  locationId?: string;\n  autoReconnectOnUnexpectedDisconnect?: boolean;\n}\n\nexport interface ConnectUsbReaderParams extends ConnectReaderParams {\n  locationId?: string;\n  autoReconnectOnUnexpectedDisconnect?: boolean;\n}\n\nexport interface ConnectTapToPayParams extends ConnectReaderParams {\n  locationId?: string;\n  onBehalfOf?: string;\n  merchantDisplayName?: string;\n  tosAcceptancePermitted?: boolean;\n  autoReconnectOnUnexpectedDisconnect?: boolean;\n}\n\nexport interface ConnectHandoffParams extends ConnectReaderParams {\n  locationId?: string;\n}\n\nexport interface ConnectInternetReaderParams extends ConnectReaderParams {\n  failIfInUse?: boolean;\n}\n\nexport type LineItem = {\n  displayName: string;\n  quantity: number;\n  amount: number;\n};\n\nexport type Cart = {\n  currency: string;\n  tax: number;\n  total: number;\n  lineItems: LineItem[];\n};\n\nexport enum CommonError {\n  Failed = 'Failed',\n  Canceled = 'Canceled',\n  Unknown = 'Unknown',\n}\n\nexport type LocationStatus = 'notSet' | 'set' | 'unknown';\n\nexport type StripeError<T = CommonError> = {\n  code: T;\n  message: string;\n};\n\nexport type InitializeResultType =\n  | {\n    reader?: Reader.Type;\n    error?: undefined;\n  }\n  | { error: StripeError; reader?: undefined };\n\nexport type DiscoverReadersResultType = Promise<{\n  error?: StripeError;\n}>;\n\nexport type CancelDiscoveringResultType = Promise<{\n  error?: StripeError;\n}>;\n\nexport type ConnectReaderResultType =\n  | {\n    reader: Reader.Type;\n    error?: undefined;\n  }\n  | { reader?: undefined; error: StripeError };\n\nexport type DisconnectReaderResultType = {\n  error: StripeError;\n};\n\nexport type RebootReaderResultType = {\n  error: StripeError;\n};\n\nexport type UpdateSoftwareResultType = {\n  update?: Reader.SoftwareUpdate;\n  error?: StripeError;\n};\n\nexport interface Location {\n  displayName?: string;\n  id: string;\n  livemode: boolean;\n  address?: Address;\n}\n\nexport interface Address {\n  city?: string;\n  country?: string;\n  postalCode?: string;\n  line1?: string;\n  line2?: string;\n  state?: string;\n}\n\nexport type PaymentStatus =\n  | 'notReady'\n  | 'ready'\n  | 'processing'\n  | 'waitingForInput';\n\nexport type PaymentMethodType =\n  | 'cardPresent'\n  | 'interacPresent'\n  | 'card'\n  | 'wechatPay'\n  | 'affirm'\n  | 'paynow';\n\nexport interface Charge {\n  id: string;\n  amount: number;\n  description: string;\n  currency: string;\n  status: string;\n  paymentMethodDetails: PaymentMethodDetails;\n}\n\nexport type CreatePaymentIntentParams = CreatePaymentIntentIOSParams & {\n  amount: number;\n  currency: string;\n  setupFutureUsage?: 'off_session' | 'on_session';\n  onBehalfOf?: string;\n  transferDataDestination?: string;\n  applicationFeeAmount?: number;\n  stripeDescription?: string;\n  statementDescriptor?: string;\n  statementDescriptorSuffix?: string;\n  receiptEmail?: string;\n  customer?: string;\n  transferGroup?: string;\n  metadata?: Record<string, string>;\n  paymentMethodOptions?: PaymentMethodOptions;\n  captureMethod?: 'automatic' | 'manual';\n  offlineBehavior?: 'prefer_online' | 'require_online' | 'force_offline';\n};\n\nexport type CreatePaymentIntentIOSParams = {\n  paymentMethodTypes?: string[];\n};\n\nexport type PaymentMethodOptions = {\n  requestExtendedAuthorization?: boolean;\n  requestIncrementalAuthorizationSupport?: boolean;\n  requestedPriority: string;\n  requestPartialAuthorization?: string;\n  captureMethod?: 'manual' | 'manual_preferred';\n};\n\nexport type CollectPaymentMethodParams = {\n  paymentIntent: PaymentIntent.Type;\n  skipTipping?: boolean;\n  tipEligibleAmount?: number;\n  updatePaymentIntent?: boolean;\n  enableCustomerCancellation?: boolean;\n  requestDynamicCurrencyConversion?: boolean;\n  surchargeNotice?: string;\n  allowRedisplay?: AllowRedisplay;\n  moto?: boolean;\n};\n\nexport type ConfirmPaymentMethodParams = {\n  paymentIntent: PaymentIntent.Type;\n  surcharge?: Surcharge;\n  returnUrl?: string;\n};\n\nexport type Surcharge = {\n  amount: number;\n  consent?: SurchargeConsent | null;\n};\n\nexport type SurchargeConsent = {\n  notice: string;\n  collection: SurchargeConsentCollection;\n};\n\nexport type SurchargeConsentCollection = 'disabled' | 'enabled';\n\nexport type CancelPaymentMethodParams = {\n  paymentIntent: PaymentIntent.Type;\n};\n\nexport type ConfirmSetupIntentMethodParams = {\n  setupIntent: SetupIntent.Type;\n};\n\nexport type CancelSetupIntentMethodParams = {\n  setupIntent: SetupIntent.Type;\n};\n\nexport type CollectSetupIntentPaymentMethodParams = {\n  allowRedisplay?: AllowRedisplay;\n  enableCustomerCancellation?: boolean;\n  setupIntent: SetupIntent.Type;\n  moto?: boolean;\n  collectionReason?: CollectionReason; // only for ios now\n};\n\nexport type AllowRedisplay = 'always' | 'limited' | 'unspecified';\n\nexport type CollectionReason = 'saveCard' | 'verify' | 'unspecified';\n\nexport type CreateSetupIntentParams = {\n  customer?: string;\n  description?: string;\n  metadata?: Record<string, string>;\n  onBehalfOf?: string;\n  paymentMethodTypes?: string[];\n  usage?: string;\n};\n\nexport type PaymentIntentResultType =\n  | {\n    paymentIntent: PaymentIntent.Type;\n    error?: undefined;\n  }\n  | {\n    paymentIntent?: undefined;\n    error: StripeError;\n  }\n  | {\n    paymentIntent: PaymentIntent.Type;\n    error: StripeError;\n  };\n\nexport type SetupIntentResultType =\n  | {\n    setupIntent: SetupIntent.Type;\n    error?: undefined;\n  }\n  | {\n    setupIntent?: undefined;\n    error: StripeError;\n  };\n\nexport type GetLocationsResultType =\n  | {\n    locations: Location[];\n    hasMore: boolean;\n    error?: undefined;\n  }\n  | {\n    locations?: undefined;\n    hasMore?: undefined;\n    error: StripeError;\n  };\n\nexport type ClearReaderDisplayResultType = {\n  error: StripeError;\n};\n\nexport type CollectRefundPaymentMethodType = {\n  error?: StripeError;\n};\n\nexport type RefundParams = {\n  chargeId: string;\n  paymentIntentId: string;\n  amount: number;\n  currency: string;\n  refundApplicationFee?: boolean;\n  reverseTransfer?: boolean;\n  enableCustomerCancellation?: boolean;\n  metadata?: Record<string, string>;\n};\n\nexport type CardPresentDetails = {\n  last4: string;\n  expMonth: string;\n  expYear: string;\n  cardholderName?: string;\n  funding: string;\n  brand: string;\n  generatedCard?: string;\n  receipt?: ReceiptDetails;\n  emvAuthData?: string;\n  country?: string;\n  preferredLocales: string[];\n  issuer: string;\n  iin: string;\n  network: string;\n  description: string;\n  wallet: Wallet;\n  location?: string;\n  reader?: string;\n};\n\nexport type WechatPayDetails = {\n  location?: string;\n  reader?: string;\n  transactionId?: string;\n};\n\nexport type AffirmDetails = {\n  location?: string;\n  reader?: string;\n  transactionId?: string;\n};\n\nexport type PaynowDetails = {\n  location?: string;\n  reader?: string;\n  reference?: string;\n};\n\nexport type ReceiptDetails = {\n  accountType: string;\n  applicationCryptogram: string;\n  applicationPreferredName: string;\n  authorizationCode: string;\n  authorizationResponseCode: string;\n  cvm: string;\n  dedicatedFileName: string;\n  terminalVerificationResult: string;\n  transactionStatusInformation: string;\n};\n\nexport type Wallet = {\n  type: string;\n};\n\nexport type PaymentMethodDetails = {\n  type: string;\n  cardPresentDetails?: CardPresentDetails;\n  interacPresentDetails?: CardPresentDetails;\n  wechatPayDetails?: WechatPayDetails;\n  affirmDetails?: AffirmDetails;\n  paynowDetails?: PaynowDetails;\n  cardDetails?: CardDetails;\n};\n\nexport type CardDetails = {\n  brand?: string;\n  country?: string;\n  expMonth?: number;\n  expYear?: number;\n  funding?: string;\n  last4?: string;\n};\n\nexport type ConfirmRefundResultType = {\n  refund?: Refund.Props;\n  error?: StripeError;\n};\n\nexport type OfflineStatusDetails = {\n  networkStatus: 'online' | 'offline' | 'unknown';\n  offlinePaymentsCount: number;\n  offlinePaymentAmountsByCurrency: { [key: string]: number };\n};\n\nexport type OfflineStatus = {\n  sdk: OfflineStatusDetails;\n  reader?: OfflineStatusDetails;\n};\n\nexport type ReaderEvent = 'cardInserted' | 'cardRemoved';\n\nexport type ConnectionStatus =\n  | 'notConnected'\n  | 'connecting'\n  | 'connected'\n  | 'discovering';\n\n/**\n * @ignore\n */\nexport type EventResult<T> = {\n  result: T;\n};\n\nexport type UserCallbacks = {\n  onUpdateDiscoveredReaders?(readers: Reader.Type[]): void;\n  onFinishDiscoveringReaders?(error?: StripeError): void;\n  onDidReportAvailableUpdate?(update: Reader.SoftwareUpdate): void;\n  onDidStartInstallingUpdate?(update: Reader.SoftwareUpdate): void;\n  onDidReportReaderSoftwareUpdateProgress?(progress: string): void;\n  onDidFinishInstallingUpdate?(result: UpdateSoftwareResultType): void;\n\n  onDidRequestReaderInput?(input: Reader.InputOptions[]): void;\n  onDidRequestReaderDisplayMessage?(message: Reader.DisplayMessage): void;\n\n  onDidChangeConnectionStatus?(status: Reader.ConnectionStatus): void;\n  onDidChangePaymentStatus?(status: PaymentStatus): void;\n\n  onDidStartReaderReconnect?(reader: Reader.Type, reason?: Reader.DisconnectReason): void;\n  onDidSucceedReaderReconnect?(reader: Reader.Type): void;\n  onDidFailReaderReconnect?(reader: Reader.Type): void;\n\n  onDidChangeOfflineStatus?(status: OfflineStatus): void;\n  onDidForwardPaymentIntent?(\n    paymentIntent: PaymentIntent.Type,\n    error: StripeError\n  ): void;\n  onDidForwardingFailure?(error?: StripeError): void;\n\n  onDidDisconnect?(reason?: Reader.DisconnectReason): void;\n\n  onDidUpdateBatteryLevel?(result: Reader.BatteryLevel): void;\n  onDidReportLowBatteryWarning?(): void;\n  onDidReportReaderEvent?(event: ReaderEvent): void;\n\n  onDidAcceptTermsOfService?(): void;\n};\n\nexport namespace PaymentMethod {\n  export type Type = {\n    type: PaymentMethodType;\n    id: string;\n    customer: string;\n    interacPresentDetails: CardPresentDetails;\n    cardPresentDetails: CardPresentDetails;\n    wechatPayDetails: WechatPayDetails;\n    affirmDetails: AffirmDetails;\n    paynowDetails?: PaynowDetails;\n    metadata?: Record<string, string>;\n  };\n}\n\nexport type PaymentMethodResultType =\n  | {\n    paymentMethod?: PaymentMethod.Type;\n    error: undefined;\n  }\n  | {\n    paymentMethod: undefined;\n    error: StripeError;\n  };\n\nexport interface ICollectInputsParameters {\n  inputs: Array<IInput>;\n}\n\nexport enum FormType {\n  SELECTION = 'selection',\n  SIGNATURE = 'signature',\n  PHONE = 'phone',\n  EMAIL = 'email',\n  NUMERIC = 'numeric',\n  TEXT = 'text',\n}\n\nexport interface IInput {\n  formType: FormType;\n  required?: boolean | null;\n  title: string;\n  description?: string | null;\n  toggles?: IToggle[] | null;\n  skipButtonText?: string | null;\n  submitButtonText?: string | null;\n  selectionButtons?: ISelectionButton[];\n}\n\nexport interface ICollectInputsResults {\n  collectInputResults?: ICollectInputsResult[];\n  error: StripeError;\n}\n\nexport interface ICollectInputsResult {\n  skipped: boolean;\n  formType: FormType;\n  toggles: ToggleResult[];\n}\n\n// Contains data collected from a selection form\nexport interface SelectionResult extends ICollectInputsResult {\n  // selected button. Null if the form was skipped.\n  selection?: string | null;\n  selectionId?: string | null;\n}\n\n// Contains data collected from a signature form\nexport interface SignatureResult extends ICollectInputsResult {\n  // signature in svg format. Null if the form was skipped.\n  signatureSvg?: string | null;\n}\n\n// Contains data collected from a phone form\nexport interface PhoneResult extends ICollectInputsResult {\n  // the submitted phone number in E.164 format. Null if the form was skipped.\n  phone?: string | null;\n}\n\n// Contains data collected from an email form\nexport interface EmailResult extends ICollectInputsResult {\n  // the submitted email. Null if the form was skipped.\n  email?: string | null;\n}\n\n// Contains data collected from a text form\nexport interface TextResult extends ICollectInputsResult {\n  // the submitted text. Null if the form was skipped.\n  text?: string | null;\n}\n\n// Contains data collected from an email form\nexport interface NumericResult extends ICollectInputsResult {\n  // the submitted number as a string. Null if the form was skipped.\n  numericString?: string | null;\n}\n\nexport interface ISelectionButton {\n  style: SelectionButtonStyle;\n  text: string;\n  id: string;\n}\n\nexport enum SelectionButtonStyle {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n}\n\nexport interface IToggle {\n  title?: string | null;\n  description?: string | null;\n  defaultValue: ToggleValue;\n}\n\nexport enum ToggleValue {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n}\n\nexport enum ToggleResult {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n  SKIPPED = 'skipped',\n}\n\nexport type OfflineDetails = {\n  storedAtMs: string;\n  requiresUpload: boolean;\n  cardPresentDetails: OfflineCardPresentDetails;\n  amountDetails: AmountDetails;\n};\n\nexport type OfflineCardPresentDetails = {\n  brand: string;\n  cardholderName: string;\n  expMonth: number;\n  expYear: number;\n  last4: string;\n  readMethod: string;\n  receiptDetails: ReceiptDetails;\n};\n\nexport type AmountDetails = {\n  tip: Amount;\n};\n\nexport type Amount = {\n  amount: number;\n};\n\nexport type CollectedData = {\n  stripeId?: string;\n  nfcUid?: string;\n  created: string;\n  livemode: boolean;\n};\n\nexport interface CollectDataParams {\n  collectDataType: CollectDataType;\n  enableCustomerCancellation: boolean;\n}\n\nexport enum CollectDataType {\n  MAGSTRIPE = 'magstripe',\n  NFC_UID = 'nfcUid',\n  UNKNOWN = 'unknown',\n}\n\nexport type CollectDataResultType =\n  | {\n    collectedData?: CollectedData;\n    error?: undefined;\n  }\n  | {\n    collectedData?: undefined;\n    error: StripeError;\n  };\n\nexport type TapToPayUxConfiguration = {\n  tapZone?: TapZone;\n  darkMode?: DarkMode;\n  colors?: Colors;\n};\n\nexport type TapZone = {\n  tapZoneIndicator?: TapZoneIndicator;\n  tapZonePosition?: TapZonePosition;\n};\n\nexport type TapZonePosition = {\n  xBias: number;\n  yBias: number;\n};\n\nexport enum TapZoneIndicator {\n  DEFAULT = 'default',\n  ABOVE = 'above',\n  BELOW = 'below',\n  FRONT = 'front',\n  BEHIND = 'behind',\n}\n\nexport type Colors = {\n  primary?: string;\n  success?: string;\n  error?: string;\n};\n\nexport enum DarkMode {\n  DARK = 'dark',\n  LIGHT = 'light',\n  SYSTEM = 'system',\n}\n\n/**\n * Content for a print operation.\n *\n * Supported content:\n * - Image (JPEG/PNG) encoded as a base64 string or 'data:' URI scheme.\n */\nexport type PrintContent = string;\n"],"mappings":"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","ignoreList":[]}