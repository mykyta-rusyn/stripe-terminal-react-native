{"version":3,"names":["_reactNative","require","_b64EncodeDecode","packageJson","name","version","description","main","module","types","source","scripts","test","typescript","lint","prettier","prepare","pods","clean","bootstrap","reset","docs","keywords","repository","author","license","bugs","url","homepage","publishConfig","registry","devDependencies","commitlint","detox","eslint","husky","jest","react","stripe","typedoc","preset","setupFiles","reporters","testEnvironment","testEnvironmentOptions","browsers","modulePathIgnorePatterns","moduleNameMapper","peerDependencies","eslintConfig","root","rules","quoteProps","singleQuote","tabWidth","trailingComma","useTabs","eslintIgnore","output","targets","configFile","project","kitType","alignDeps","requirements","development","production","capabilities","packageManager","getDeviceInfo","_Platform$select","device_class","host_os_version","Platform","Version","toString","hardware_model","pos_info","select","ios","android","buildGatorRequest","method","requestPayload","sessionToken","id","Date","now","service","content","b64EncodeUnicode","JSON","stringify","session_token","version_info","client_type","client_version","parent_trace_id","device_info","sendGatorRequest","_ref","_asyncToGenerator2","default","request","fetch","headers","body","_x","apply","arguments","Logger","exports","_classCallCheck2","_traces","setInterval","flushTraces","_createClass2","key","value","getInstance","instance","traceSdkMethod","fn","methodName","constructTrace","action_id","Math","floor","random","_len","length","args","Array","_key","baseTraceObject","origin_role","origin_id","posId","trace","request_info","user_agent","start_time_ms","total_time_ms","traces","additional_context","session_id","serial_number","response","Promise","tracePromise","traceError","traceSuccess","req","proxy_traces","_toConsumableArray2","then","_resp","eventRequest","proxy_events","getEventPayload","map","_trace$trace","_trace$trace2","event","domain","scope","result","exception","clonedTraceBase","Object","assign","resp","error","responseString","catch","e","traceException","push","message","status_code","cause","substring"],"sources":["logger.ts"],"sourcesContent":["import * as packageJson from '../package.json';\nimport { Platform } from 'react-native';\nimport { b64EncodeUnicode } from './utils/b64EncodeDecode';\n\ninterface ObjectWithError {\n  error: any;\n}\n\ninterface Trace {\n  origin_role: string;\n  origin_id: string;\n  trace: {\n    action_id: string;\n    request_info: {\n      user_agent: string;\n    };\n    start_time_ms: number;\n    total_time_ms: number;\n    service: string;\n    method: string;\n    request: string;\n    response?: string;\n    exception?: string;\n    version_info: {\n      client_type: string;\n      client_version: string;\n    };\n    traces: string[];\n    additional_context: {\n      action_id: string;\n      session_id: string;\n      serial_number: string;\n    };\n  };\n}\n\nconst getDeviceInfo = () => {\n  return {\n    device_class: 'POS',\n    // device_uuid: '',\n    host_os_version: Platform.Version.toString(),\n    // host_hw_version: '', // ex: 'iPad4,1' or 'SM-N960U'\n    hardware_model: {\n      pos_info: {\n        description: Platform.select({\n          ios: 'iOS',\n          android: 'Android',\n        })?.toString(),\n      },\n    },\n    // app_model: {\n    //   app_id: '',\n    //   app_version: '',\n    // },\n  };\n};\n\nconst buildGatorRequest = (\n  method: string,\n  requestPayload: object,\n  sessionToken: string | null\n) => {\n  return {\n    id: Date.now(),\n    service: 'GatorService',\n    method,\n    content: b64EncodeUnicode(JSON.stringify(requestPayload)),\n    session_token: sessionToken || '',\n    version_info: {\n      client_type: 'RN_SDK',\n      client_version: packageJson.version,\n    },\n\n    parent_trace_id: '',\n    device_info: getDeviceInfo(),\n  };\n};\n\nconst sendGatorRequest = async (request: object) => {\n  const url = 'https://gator.stripe.com:443/protojsonservice/GatorService';\n\n  return fetch(url, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request),\n  });\n};\n\n/**\n * A singleton class whose instance exists for the lifetime of the RN SDK.\n * This class batches traces and sends them to Client-Logger, a Stripe-internal\n * analytics service.\n *\n * The instance holds onto traces, and holds a timer that flushes the collected\n * traces (currently every 10 seconds).\n */\nexport default class Logger {\n  static instance: Logger | null = null;\n  static posId: string = `pos-${Math.random().toString(36).substring(2)}`;\n  _traces: Array<Trace> = [];\n\n  static getInstance() {\n    if (Logger.instance === null) {\n      Logger.instance = new Logger();\n    }\n\n    return Logger.instance;\n  }\n\n  constructor() {\n    setInterval(Logger.flushTraces, 10 * 1000);\n  }\n\n  /**\n   * A method that traces that an inner function (`fn`) was called. This should\n   * wrap the entire method body of a public facing Terminal SDK method.\n   * This method logs the function parameters with which the function was called,\n   * and the response that gets sent back to the user.\n   *\n   * @param fn The inner function that should be called and traced.\n   * @param methodName The name of the SDK method that's getting traced.\n   * @returns A function that should be called with `fn`'s args.\n   */\n  static traceSdkMethod(\n    fn: (...args: any[]) => any | Promise<any>,\n    methodName: string\n  ) {\n    return function constructTrace(this: any, ...args: any[]) {\n      const method = methodName || fn.name;\n\n      const action_id = `${Math.floor(Math.random() * 100000000)}`;\n\n      const baseTraceObject: Trace = {\n        origin_role: 'pos-rn',\n        origin_id: Logger.posId,\n        trace: {\n          action_id,\n          request_info: {\n            user_agent: '',\n          },\n          start_time_ms: Date.now(),\n          total_time_ms: 0,\n          service: 'StripeTerminalReactNative',\n          method,\n          request: JSON.stringify({ args }),\n          version_info: {\n            client_type: 'RN_SDK',\n            client_version: packageJson.version,\n          },\n          traces: [],\n          additional_context: {\n            action_id,\n            session_id: '',\n            serial_number: '',\n          },\n        },\n      };\n\n      const response = fn.apply(this, args);\n\n      if (response instanceof Promise) {\n        Logger.tracePromise(baseTraceObject, response);\n        return response;\n      }\n\n      if ('error' in response) {\n        Logger.traceError(baseTraceObject, response);\n        return response;\n      }\n\n      Logger.traceSuccess(baseTraceObject, JSON.stringify(response));\n      return response;\n    };\n  }\n\n  private static flushTraces() {\n    if (Logger.getInstance()._traces.length === 0) {\n      return;\n    }\n\n    // reportTrace\n    const req = buildGatorRequest(\n      'reportTrace',\n      { proxy_traces: [...Logger.getInstance()._traces] },\n      ''\n    );\n    sendGatorRequest(req).then((_resp) => {\n      Logger.getInstance()._traces = [];\n    });\n\n    // reportEvent\n    const eventRequest = buildGatorRequest(\n      'reportEvent',\n      {\n        proxy_events: Logger.getEventPayload(),\n      },\n      ''\n    );\n    sendGatorRequest(eventRequest).then((_resp) => {\n      Logger.getInstance()._traces = [];\n    });\n  }\n\n  private static getEventPayload() {\n    return Logger.getInstance()._traces.map((trace) => ({\n      origin_role: 'pos-rn',\n      origin_id: Logger.posId,\n      event: {\n        domain: 'Tracer',\n        scope: 'e',\n        event: trace?.trace?.method,\n        result: trace?.trace?.exception ? 'ERROR' : 'OK',\n      },\n    }));\n  }\n\n  private static tracePromise(\n    baseTraceObject: Trace,\n    response: Promise<any>\n  ): void {\n    const clonedTraceBase = { ...baseTraceObject };\n    response\n      .then((resp) => {\n        if ('error' in resp && resp.error) {\n          Logger.traceError(clonedTraceBase, resp);\n          return;\n        }\n\n        const responseString = JSON.stringify(resp);\n        Logger.traceSuccess(clonedTraceBase, responseString);\n      })\n      .catch((e) => {\n        Logger.traceException(clonedTraceBase, e);\n      });\n  }\n\n  private static traceSuccess(baseTraceObject: Trace, response: string): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        response,\n      },\n    };\n\n    Logger.getInstance()._traces.push(trace);\n  }\n\n  private static traceError(\n    baseTraceObject: Trace,\n    response: ObjectWithError\n  ): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        exception: JSON.stringify(response.error),\n        response: JSON.stringify(response),\n      },\n    };\n    Logger.getInstance()._traces.push(trace);\n  }\n\n  private static traceException(\n    baseTraceObject: Trace,\n    exception: Error\n  ): void {\n    const trace = {\n      ...baseTraceObject,\n      trace: {\n        ...baseTraceObject.trace,\n        exception: exception.message,\n        status_code: exception.cause,\n        response: JSON.stringify(exception),\n      },\n    };\n    Logger.getInstance()._traces.push(trace);\n  }\n}\n"],"mappings":"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","ignoreList":[]}